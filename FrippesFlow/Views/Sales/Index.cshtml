<h1>Sales Overview</h1>
<button>Add Weekly Sales</button>
<div>
    <canvas id="bread-chart"></canvas>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom"></script>
<script>
    Chart.register(ChartZoom);

    class ChartGenerator {
        constructor(context, chartType, datasets, dataUnit, xAxisUnit = 'dag') {
            this.context = context;
            this.chartType = chartType;
            this.datasets = datasets;
            this.chart = null;
            this.dataUnit = dataUnit;
            this.xAxisUnit = xAxisUnit;
            this.pieChartInstance = null;
            this.randomColors = this.getRandomColors(datasets[0].data.length);
        }

        generateChart() {
            const chartData = {
                labels: this.datasets[1].data.map((_, index) => index + 1),
                datasets: this.datasets.map((dataset, index) => ({
                    label: dataset.label,
                    data: dataset.data,
                    borderColor: this.randomColors[index],
                    borderWidth: 0.5,
                    pointRadius: 1,
                    pointHoverRadius: 3,
                    lineTension: 0.0001,
                    backgroundColor: this.randomColors[index],
                    fill: false,
                })),
            };

            this.chartInstance = new Chart(this.context, {
                type: this.chartType,
                data: chartData,
                options: {
                    responsive: true,
                    plugins: {
                        tooltip: {
                            callbacks: {
                                title: () => '',
                                label: (tooltipItem) => {
                                    const datasetLabel = tooltipItem.dataset.label || '';
                                    const dataInDataPoint = tooltipItem.raw;
                                    return `${datasetLabel}: ${dataInDataPoint} ${this.dataUnit}`;
                                },
                            },
                        },
                        zoom: {
                            zoom: {
                                wheel: {
                                    enabled: true,
                                },
                                pinch: {
                                    enabled: true,
                                },
                                mode: 'y',
                            },
                            pan: {
                                enabled: true,
                                mode: 'x',
                            },
                        },
                    },
                    scales: {
                        x: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: this.xAxisUnit,
                            },
                            ticks: {
                                maxTicksLimit: 10,
                            },
                        },
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: this.dataUnit,
                            },
                        },
                    },
                },
            });
            this.context.canvas.addEventListener('click', (event) => {
                const activePoints = this.chartInstance.getElementsAtEventForMode(
                    event,
                    'nearest',
                    { intersect: true },
                    false
                );

                if (activePoints.length) {
                    const pieChartId = 'pie-chart';
                    const existingCanvas = document.getElementById(pieChartId);
                    if (existingCanvas) {
                        existingCanvas.parentNode.removeChild(existingCanvas);
                    }

                    const pieChartCanvas = document.createElement('canvas');
                    pieChartCanvas.id = pieChartId;
                    document.body.appendChild(pieChartCanvas);

                    const clickedIndex = activePoints[0].index;
                    this.updatePieChart(clickedIndex, pieChartCanvas);
                }
            });
        }

        updatePieChart(dayIndex, pieChartCanvas) {
            const color = this.randomColors;
            const data = this.datasets.map((dataset) => dataset.data[dayIndex]);

            const pieChartData = {
                labels: this.datasets.map((dataset) => dataset.label),
                datasets: [
                    {
                        data: data,
                        backgroundColor: color,
                        borderWidth: 0,
                    },
                ],
            };

            const pieChartContext = pieChartCanvas.getContext('2d');
            this.pieChartInstance = new Chart(pieChartContext, {
                type: 'pie',
                data: pieChartData,
                options: {
                    responsive: true,
                    plugins: {
                        title: {
                            display: true,
                            text: `${this.dataUnit} fÃ¶r dag ${dayIndex + 1}`, // Set the title for new instance
                        },
                        tooltip: {
                            callbacks: {
                                label: (tooltipItem) => {
                                    const datasetLabel = tooltipItem.label;
                                    const price = tooltipItem.raw;
                                    return `${datasetLabel}: ${price} ${this.dataUnit}`; // Use the correct unit
                                },
                            },
                        },
                    },
                },
            });

            pieChartCanvas.addEventListener(
                'contextmenu',
                function (event) {
                    event.preventDefault();
                    pieChartCanvas.parentNode.removeChild(pieChartCanvas);
                    this.pieChartInstance.destroy();
                }.bind(this)
            );
        }

        randomColorValue = (min = 120, max = 210) => {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        };

        getRandomColors(numberOfColors, alpha = 1) {
            let colors = [];
            for (let colorIndex = 0; colorIndex < numberOfColors; colorIndex++) {
                const randomColor = `rgba(${this.randomColorValue()}, 
    ${this.randomColorValue()}, 
    ${this.randomColorValue()},
    ${alpha})`;
                colors.push(randomColor);
            }
            return colors;
        }
    }

    const datasets = [
        {
            label: 'Dataset A',
            data: [
                152, 181, 112, 116, 110, 110, 211, 111, 110, 87, 81, 80, 80, 110, 111,
                219, 196, 3, 110, 111, 111, 214, 111, 111, 110, 85, 82, 111, 88, 215, 152,
                181, 112, 116, 110, 110, 211, 111, 110, 87, 76, 80, 80, 110, 111, 219, 6,
                171, 110, 111, 111, 8, 111, 111, 110, 85, 82, 111, 88, 215, 152, 181, 112,
                116, 110, 110, 211, 111, 110, 87, 81, 80, 80, 110, 111, 219, 196, 171,
                110, 111, 111, 214, 111, 111, 110, 85, 82, 111, 88, 215, 152, 181, 112,
                116, 110, 110, 4, 111, 110, 87, 81, 80, 80, 110, 111, 219, 196, 171, 7,
                111, 111, 214, 6, 111, 110, 85, 82, 111, 88, 215, 152, 181, 112, 116, 110,
                4, 211, 111, 110, 87, 81, 80, 80, 110, 111, 219, 196, 171, 110, 111, 111,
                214, 111, 111, 110, 85, 82, 111, 88, 215, 152, 181, 112, 89, 110, 110,
                211, 111, 6, 87, 81, 80, 80, 110, 111, 219, 196, 171, 1, 111, 111, 214,
                111, 111, 110, 85, 82, 111, 88, 215,
            ],
        },
        {
            label: 'Dataset B',
            data: [
                30, 530, 29, 30, 32, 30, 31, 29, 30, 31, 29, 30, 32, 30, 29, 31, 30, 29,
                30, 31, 29, 30, 32, 31, 30, 29, 30, 31, 32, 30, 390, 31, 29, 30, 32, 30,
                31, 29, 30, 31, 29, 30, 32, 306, 29, 31, 30, 29, 30, 31, 29, 30, 32, 31,
                30, 29, 310, 31, 32, 530, 30, 31, 259, 30, 32, 30, 31, 29, 30, 31, 29, 30,
                32, 30, 329, 431, 30, 29, 30, 31, 29, 530, 32, 31, 30, 29, 30, 31, 32, 30,
                30, 31, 29, 530, 32, 1, 31, 29, 30, 31, 29, 30, 326, 1, 29, 31, 30, 29,
                30, 530, 29, 530, 342, 31, 30, 29, 30, 31, 32, 30, 301, 31, 29, 30, 32,
                30, 31, 29, 30, 31, 29, 530, 32, 30, 239, 31, 380, 29, 30, 31, 29, 30, 32,
                31, 30, 29, 30, 31, 32, 30, 30, 31, 29, 30, 32, 30, 31, 29, 30, 31, 29,
                30, 32, 30, 269, 31, 530, 530, 30, 31, 29, 30, 32, 31, 30, 29, 320, 31,
                32, 30,
            ],
        },
    ];

    const ctx = document.getElementById('bread-chart').getContext('2d');

    const chartGenerator = new ChartGenerator(ctx, 'line', datasets, 'kr');

    chartGenerator.generateChart();
</script>
